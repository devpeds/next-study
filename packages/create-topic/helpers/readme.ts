import { writeFile } from "fs/promises";
import path from "path";

import { PackageJson } from "./package.js";
import { parseTopic } from "./project.js";

const readme = (args: {
  topicNumber: string;
  topicName: string;
  nodeVersion: number;
  reactVersion: number;
  nextVersion: number;
}) => `# [Topic ${args.topicNumber}] ${args.topicName}

Next.js app generated by \`@shared/create-topic\`

## Getting Started

\`\`\`bash
pnpm install

pnpm dev # run server in development mode (http://localhost:3000)

# or
pnpm build # build the app
pnpm start # run server in production mode (http://localhost:3000)
\`\`\`

## Tech Stack

- Node ${args.nodeVersion}
- React ${args.reactVersion}
- Next.js ${args.nextVersion}

## Documentations

- [add documentation here](./)

`;

function parseSemver(semver: string) {
  const results = semver.match(/(\d+)\.(\d+)\.(\d+)/);
  if (!results) {
    throw new Error(`failed to parsing semver: ${semver}`);
  }

  return [results[1], results[2], results[3]].map((v) => Number(v));
}

export async function createReadme(
  projectDir: string,
  packageJson: PackageJson
) {
  console.log("creating README.md...");
  const [topicNumber, topicName] = parseTopic(projectDir);
  const [nodeVersion] = parseSemver(process.version);
  const [reactVersion] = parseSemver(packageJson.dependencies["react"]);
  const [nextVersion] = parseSemver(packageJson.dependencies["next"]);

  await writeFile(
    path.resolve(projectDir, "README.md"),
    readme({ topicNumber, topicName, nodeVersion, reactVersion, nextVersion })
  );
}
